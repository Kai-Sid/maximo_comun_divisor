class MCDCalculadora:
    def __init__(self, a=1, b=1):
        self._a = None
        self._b = None
        self.a = a
        self.b = b

    @property
    def a(self):
        return self._a

    @a.setter
    def a(self, valor):
        if self._es_valido(valor):
            self._a = valor
        else:
            raise ValueError("El valor de 'a' debe ser un entero positivo.")

    @property
    def b(self):
        return self._b

    @b.setter
    def b(self, valor):
        if self._es_valido(valor):
            self._b = valor
        else:
            raise ValueError("El valor de 'b' debe ser un entero positivo.")

    def _es_valido(self, valor):
        return isinstance(valor, int) and valor > 0

    def calcular_mcd(self):
        a, b = self._a, self._b
        while b != 0:
            a, b = b, a % b
        return a


class EntradaUsuario:
    @staticmethod
    def solicitar_numero(mensaje):
        while True:
            entrada = input(mensaje)
            if EntradaUsuario._validar_numero(entrada):
                return int(entrada)

    @staticmethod
    def _validar_numero(valor):
        try:
            numero = int(valor)
            if numero <= 0:
                print("Por favor, ingrese un número entero positivo.")
                return False
            return True
        except ValueError:
            print("Por favor, ingrese un número entero válido.")
            return False


def main():
    print("=== Calculadora de Máximo Común Divisor (MCD) ===")
    num1 = EntradaUsuario.solicitar_numero("Ingrese el primer número entero positivo: ")
    num2 = EntradaUsuario.solicitar_numero("Ingrese el segundo número entero positivo: ")

    calculadora = MCDCalculadora()
    calculadora.a = num1
    calculadora.b = num2

    resultado = calculadora.calcular_mcd()
    print(f"El Máximo Común Divisor de {calculadora.a} y {calculadora.b} es: {resultado}")


if __name__ == "__main__":
    main()
