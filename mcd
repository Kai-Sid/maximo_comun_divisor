class MCD:
    def __init__(self, a=1, b=1):
        self.__a = None
        self.__b = None
        self.set_a(a)
        self.set_b(b)

    # Getter de a
    def get_a(self):
        return self.__a

    # Setter de a
    def set_a(self, valor):
        if self.__es_valido(valor):
            self.__a = valor
        else:
            raise ValueError("El número 'a' debe ser un entero positivo.")

    # Getter de b
    def get_b(self):
        return self.__b

    # Setter de b
    def set_b(self, valor):
        if self.__es_valido(valor):
            self.__b = valor
        else:
            raise ValueError("El número 'b' debe ser un entero positivo.")

    # Método privado para validar
    def __es_valido(self, valor):
        return isinstance(valor, int) and valor > 0

    # Cálculo del MCD usando el algoritmo de Euclides
    def calcular(self):
        a, b = self.__a, self.__b
        while b != 0:
            a, b = b, a % b
        return a


class EntradaUsuario:
    @staticmethod
    def solicitar_numero(mensaje):
        while True:
            entrada = input(mensaje)
            try:
                num = int(entrada)
                if num > 0:
                    return num
                else:
                    print("Por favor, ingrese un número entero positivo.")
            except ValueError:
                print("Por favor, ingrese un número entero válido.")


def main():
    print("=== Calculadora de MCD con POO ===")
    num1 = EntradaUsuario.solicitar_numero("Ingrese el primer número entero positivo: ")
    num2 = EntradaUsuario.solicitar_numero("Ingrese el segundo número entero positivo: ")

    mcd = MCD()
    mcd.set_a(num1)
    mcd.set_b(num2)

    resultado = mcd.calcular()
    print(f"El Máximo Común Divisor de {mcd.get_a()} y {mcd.get_b()} es: {resultado}")


if __name__ == "__main__":
    main()
